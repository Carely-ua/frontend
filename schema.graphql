schema {
  query: Query
  mutation: Mutation
}
scalar Date
scalar JSON
scalar Upload
type Mutation {
  register(login: String!, password: String!): Boolean
  auth(login: String!, password: String!): String
  createCategory(input: CategoryCreateInputType!): Category
  updateCategory(input: CategoryUpdateInputType!): Category
  destroyCategory(id: ID!): Boolean!
  createClinic(input: ClinicCreateInputType!): Clinic
  updateClinic(input: ClinicUpdateInputType!): Clinic
  destroyClinic(id: ID!): Boolean!
  createDoctor(input: DoctorCreateInputType!): Doctor
  updateDoctor(input: DoctorUpdateInputType!): Doctor
  destroyDoctor(id: ID!): Boolean!
  createDoctorsService(input: createDoctorService): Boolean!
  doctorsService(input: createDoctorService): Boolean!
  destroyDoctorService(doctorId: ID!, serviceId: ID!): Boolean!
  createService(input: ServiceCreateInputType!): Service
  updateService(input: ServiceUpdateInputType!): Service
  destroyService(id: ID!): Boolean!
  verifySms(phone: String!, code: String!): Boolean!
  sendSms(phone: String!): String
  signIn(input: SignInInput!): String
  editUser(input: EditUser): User
}
type Category {
  id: ID!
  title: String!
  subTitle: String!
  services: [Service]
}
type Query {
  category(filters: CategoryFilterInputType!): Category
  getCategories(filters: CategoryFilterInputType!): [Category]
  clinic(filters: ClinicFilterInputType!): Clinic
  getClinics(filters: ClinicFilterInputType!): [Clinic]
  health: Boolean!
  doctor(filters: DoctorFilterInputType!): Doctor
  getDoctors(filters: DoctorFilterInputType!): [Doctor]
  service(filters: ServiceFilterInputType!): Service
  getServices(filters: ServiceFilterInputType!): [Category]
  user: User
}
type MapCoordinates {
  lat: Float!
  lng: Float!
}
type Clinic {
  id: ID!
  name: String!
  email: String!
  address: String!
  phone: String!
  mapCoordinates: MapCoordinates!
  clinicType: ClinicType!
  city: String!
  description: String!
  image: String!
  rating: Float
  servicesWithCategories(input: ServiceFilterInputType): [Category]!
}
type Doctor {
  id: ID!
  phone: String!
  name: String!
  description: String!
  image: String!
  rating: Float
  clinicId: String!
  price: Float
  clinic: Clinic
  services: [Service]
}
type DoctorService {
  price: Float
  doctorId: ID!
  serviceId: ID!
}
type Service {
  id: ID!
  name: String!
  serviceType: ServiceType!
  description: String!
  price: Float
  clinicId: String!
  clinic: Clinic
  categoryId: String
  category: Category
}
type SmsSend {
  id: ID!
  code: String!
  phone: String!
  expiresAt: Date!
}
type User {
  id: ID!
  name: String
  surname: String
  middleName: String
  city: String
  birthday: Date
  sex: Sex
  phone: String!
  email: String
  phoneConfirmed: Boolean!
}
enum ClinicType {
  clinic
  laboratory
}
enum ServiceType {
  analyse
  diagnostic
  consultations
}
enum Sex {
  male
  female
}
input CategoryFilterInputType {
  title: String
  subTitle: String
  id: ID
}
input CategoryCreateInputType {
  title: String!
  subTitle: String!
}
input CategoryUpdateInputType {
  id: ID!
  title: String
  subTitle: String
}
input MapCoordinatesInput {
  lat: Float!
  lng: Float!
}
input ClinicFilterInputType {
  city: String
  address: String
  name: String
  mapCoordinates: MapCoordinatesInput
  id: ID
  clinicType: ClinicType
}
input ClinicCreateInputType {
  name: String!
  email: String!
  address: String!
  phone: String!
  mapCoordinates: MapCoordinatesInput!
  clinicType: ClinicType!
  city: String!
  description: String!
  image: String!
  rating: Float
}
input ClinicUpdateInputType {
  id: ID!
  name: String
  email: String
  address: String
  phone: String
  mapCoordinates: MapCoordinatesInput
  clinicType: ClinicType
  city: String
  description: String
  image: String
  rating: Float
}
input DoctorFilterInputType {
  name: String
  id: ID
  clinicId: ID
}
input DoctorCreateInputType {
  name: String!
  phone: String!
  clinicId: String!
  description: String!
  image: String!
  rating: Float
}
input DoctorUpdateInputType {
  id: ID!
  name: String
  phone: String
  clinicId: String
  description: String
  image: String
  rating: Float
}
input createDoctorService {
  doctorId: ID!
  serviceId: ID!
  price: Float
}
input ServiceFilterInputType {
  city: String
  address: String
  name: String
  description: String
  id: ID
  clinicId: String
  categoryTitle: String
  categorySubtitle: String
  serviceType: ServiceType
}
input ServiceCreateInputType {
  name: String!
  serviceType: ServiceType!
  description: String!
  price: Float
  clinicId: String!
  categoryId: String
}
input ServiceUpdateInputType {
  id: ID!
  name: String
  serviceType: ServiceType
  description: String
  price: Float
  clinicId: String
  categoryId: String
}
input SignInInput {
  phone: String!
  code: String!
}
input EditUser {
  email: String
  name: String
  surname: String
  middleName: String
  birthday: String
  sex: Sex
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
